// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NextLevelBJJ.Infrastructure.EF;

namespace NextLevelBJJ.Api.Migrations
{
    [DbContext(typeof(NextLevelBJJContext))]
    [Migration("20191104225203_initla")]
    partial class initla
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NextLevelBJJ.Core.Entities.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFree");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("PassId");

                    b.Property<Guid>("StudentId");

                    b.Property<Guid>("TrainingId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PassId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("NextLevelBJJ.Core.Entities.Pass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("PassTypeId");

                    b.Property<int>("Price");

                    b.Property<Guid>("StudentId");

                    b.Property<Guid>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PassTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Passes");
                });

            modelBuilder.Entity("NextLevelBJJ.Core.Entities.PassType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("Entries");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsOpen");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("PassTypes");
                });

            modelBuilder.Entity("NextLevelBJJ.Core.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("BirthDate");

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int>("Gender");

                    b.Property<bool>("HasDeclaration");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<Guid>("PassCode");

                    b.Property<int>("PhoneNumber");

                    b.Property<string>("Role")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique()
                        .HasFilter("[Address] IS NOT NULL");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PassCode")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("NextLevelBJJ.Core.Entities.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<TimeSpan>("FinishHour");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsKidsTraining");

                    b.Property<Guid>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<TimeSpan>("StartHour");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("NextLevelBJJ.Core.Entities.Attendance", b =>
                {
                    b.HasOne("NextLevelBJJ.Core.Entities.Student")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextLevelBJJ.Core.Entities.Student")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextLevelBJJ.Core.Entities.Pass", "Pass")
                        .WithMany("Attendances")
                        .HasForeignKey("PassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextLevelBJJ.Core.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextLevelBJJ.Core.Entities.Training", "Training")
                        .WithMany("Attendances")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NextLevelBJJ.Core.Entities.Pass", b =>
                {
                    b.HasOne("NextLevelBJJ.Core.Entities.Student")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextLevelBJJ.Core.Entities.Student")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextLevelBJJ.Core.Entities.PassType", "PassType")
                        .WithMany("Passes")
                        .HasForeignKey("PassTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextLevelBJJ.Core.Entities.Student", "Student")
                        .WithMany("Passes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NextLevelBJJ.Core.Entities.PassType", b =>
                {
                    b.HasOne("NextLevelBJJ.Core.Entities.Student")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextLevelBJJ.Core.Entities.Student")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NextLevelBJJ.Core.Entities.Student", b =>
                {
                    b.HasOne("NextLevelBJJ.Core.Entities.Student")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextLevelBJJ.Core.Entities.Student")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NextLevelBJJ.Core.Entities.Training", b =>
                {
                    b.HasOne("NextLevelBJJ.Core.Entities.Student")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NextLevelBJJ.Core.Entities.Student")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
